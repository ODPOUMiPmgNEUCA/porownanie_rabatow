# -*- coding: utf-8 -*-
"""Soczyste rabaty.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bfU5lwdNa2GOPWmQ9-URaf30VnlBzQC0
"""

#importowanie potrzebnych bibliotek
import os
import openpyxl
import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import plotly.express as px
import plotly.graph_objects as go
from urllib.request import urlopen
import json
import io



st.set_page_config(page_title='Porównanie rabatów - IPRA vs P+', layout='wide')



tabs_font_css = """
<style>
div[class*="stTextInput"] label {
  font-size: 26px;
  color: black;
}
div[class*="stSelectbox"] label {
  font-size: 26px;
  color: black;
}
</style>
"""



df = st.file_uploader(
    label = "Wrzuć Raport promocyjny"
)
if df:
    df = pd.read_csv(df, sep=';')
    st.write(df.head())

# Wybieranie tylko określonych kolumn z DataFrame
kolumny = [
    'Nazwa Promocji', 'Nr producenta sprzedażowego', 'Nazwa producenta sprzedażowego', 'Skład (SPR,SGL)', 'Czy dopuszcza rabat kontraktowy', 'Id Materiału', 
    'Nazwa Materiału', 'Rabat Promocyjny','Cena z cennika głównego','identyfikator promocji','Data obowiązywania promocji od','Data obowiązywania promocji do','Rodzaj warunku płatności',
    'Ilość Klientów','Nazwa grupy promocyjnej','MPK','Grupa klientów','Czy KDW'

]

# Filtruj kolumny w DataFrame
df = df[kolumny]
df = df[(df['Nazwa Promocji'].str.contains('P\+') | df['Nazwa Promocji'].str.contains('PARTNER')) &  ~df['Nazwa Promocji'].str.contains('WTP\+')]


# Kolumna 'Skład (SPR,SGL)' - zostawiamy tylko 'SGL'
df = df[df['Skład (SPR,SGL)'] == 'SGL']

# Kolumna 'Czy dopuszcza rabat kontraktowy' - zostawiamy tylko '1'
df = df[df['Czy dopuszcza rabat kontraktowy'] == 1]

# Kolumna 'Rodzaj warunku płatności' - zostawiamy tylko 'Standard'
df = df[df['Rodzaj warunku płatności'] == 'Standard']

# Kolumna 'Grupa klientów' - zostawiamy tylko '1'
df = df[df['Grupa klientów'] == 1]

# Kolumna 'Czy KDW' - zostawiamy tylko '0'
df = df[df['Czy KDW'] == 0]

# Kolumna Rabat P+
# Oczyszczanie kolumny 'Rabat Promocyjny'
df['Rabat Promocyjny'] = df['Rabat Promocyjny'].str.replace(',', '.')  # Zastąp przecinki kropkami, jeśli są
df['Rabat Promocyjny'] = df['Rabat Promocyjny'].str.strip()  # Usuwanie białych znaków

# Sprawdzenie wartości po konwersji
st.write("Typ danych w kolumnie 'Rabat Promocyjny':", df['Rabat Promocyjny'].dtype)
df['Rabat Promocyjny1'] = pd.to_numeric(df['Rabat Promocyjny'], errors='coerce')
df['Rabat P+'] = np.where(df['Rabat Promocyjny1'].isna(), 0, df['Rabat Promocyjny1'] / -100)





################################### tero IPRA

# Umożliwienie użytkownikowi wgrania pliku
IPRA = st.file_uploader(
    label="Wrzuć ofertę IPRA", 
    type=["xlsx"]  # Ogranicz do plików xlsx
)

# Sprawdzenie, czy plik został załadowany
if IPRA:
    # Wczytanie arkuszy z pliku Excel
    xls = pd.ExcelFile(IPRA)
    
    # Wczytanie arkusza 'IPRA WHA'
    IPRA_WHA = pd.read_excel(xls, sheet_name='IPRA WHA')
    st.write("Zawartość arkusza 'IPRA WHA':")
    st.write(IPRA_WHA.head())

    # Filtracja arkuszy, które zawierają 'EO' w nazwie
    eo_sheets = [sheet for sheet in xls.sheet_names if 'EO' in sheet]

    # Sprawdzenie, czy jest arkusz zawierający 'EO'
    if eo_sheets:
        # Wczytanie arkusza, który zawiera 'EO'
        EO = pd.read_excel(IPRA, sheet_name=eo_sheets[0])
        
        # Wyświetlenie pierwszych kilku wierszy
        st.write(f"Zawartość arkusza '{eo_sheets[0]}':")
        st.write(EO.head())
    else:
        st.write("Nie znaleziono arkuszy zawierających 'EO'.")


################ PORÓWNANIE
IPRA_WHA = IPRA_WHA.sort_values(by = 'Rabat IPRA',ascending=False)
EO = EO.sort_values(by = 'Rabat IPRA', ascending = False)
df = df.sort_values(by='Rabat P+', ascending=False)

#duplikaty
df = df.drop_duplicates(subset='Id Materiału')
IPRA_WHA = IPRA_WHA.drop_duplicates(subset='Indeks')
EO = EO.drop_duplicates(subset='Indeks')
EO = EO.rename(columns={'Rabat IPRA': 'Rabat EO'})

df_merged = df.merge(IPRA_WHA[['Indeks', 'Rabat IPRA']], left_on='Id Materiału', right_on='Indeks', how='left')
df_merged2 = df_merged.merge(EO[['Indeks', 'Rabat EO']], left_on='Id Materiału', right_on='Indeks', how='left')
columns_to_keep = ['Nazwa Promocji', 'Nr producenta sprzedażowego', 'Nazwa producenta sprzedażowego', 'Skład (SPR,SGL)', 'Czy dopuszcza rabat kontraktowy', 'Id Materiału', 
    'Nazwa Materiału', 'Rabat P+','Rabat IPRA','Rabat EO','Cena z cennika głównego','identyfikator promocji','Data obowiązywania promocji od','Data obowiązywania promocji do','Rodzaj warunku płatności',
    'Ilość Klientów','Nazwa grupy promocyjnej','MPK','Grupa klientów','Czy KDW'
]
df_merged2 = df_merged2[columns_to_keep]

# Dodanie kolumny 'IPRA WHA vs P+' z uwzględnieniem NaN
df_merged2['IPRA WHA vs P+'] = np.where(
    df_merged2['Rabat P+'].isna() | df_merged2['Rabat IPRA'].isna(),  # Sprawdź, czy którakolwiek z kolumn ma NaN
    np.nan,  # Zwróć NaN, jeśli którakolwiek kolumna ma NaN
    np.where(df_merged2['Rabat P+'] >= df_merged2['Rabat IPRA'], 1, 0)  # W przeciwnym razie wykonaj porównanie
)
df_merged2['EO vs P+'] = np.where(
    df_merged2['Rabat P+'].isna() | df_merged2['Rabat EO'].isna(),  # Sprawdź, czy którakolwiek z kolumn ma NaN
    np.nan,  # Zwróć NaN, jeśli którakolwiek kolumna ma NaN
    np.where(df_merged2['Rabat P+'] >= df_merged2['Rabat EO'], 1, 0)  # W przeciwnym razie wykonaj porównanie
)

kolumny = ['Nazwa Promocji', 'Nr producenta sprzedażowego', 'Nazwa producenta sprzedażowego', 'Skład (SPR,SGL)', 'Czy dopuszcza rabat kontraktowy', 'Id Materiału', 
    'Nazwa Materiału', 'Rabat P+','Rabat IPRA','Rabat EO','IPRA WHA vs P+','EO vs P+','Cena z cennika głównego','identyfikator promocji','Data obowiązywania promocji od','Data obowiązywania promocji do','Rodzaj warunku płatności',
    'Ilość Klientów','Nazwa grupy promocyjnej','MPK','Grupa klientów','Czy KDW'
]
df_merged2 = df_merged2[kolumny]
df_merged2


##### IPRA
IPRA_WHA_m = IPRA_WHA.merge(df[['Id Materiału','Rabat P+']], left_on='Indeks', right_on='Id Materiału', how='left')
EO_m = EO.merge(df[['Id Materiału','Rabat P+']], left_on='Indeks', right_on='Id Materiału', how='left')


IPRA_WHA_m['IPRA vs P+'] = np.where(
    IPRA_WHA_m['Rabat IPRA'].isna() | IPRA_WHA_m['Rabat P+'].isna(),  # Sprawdź, czy którakolwiek z kolumn ma NaN
    np.nan,  # Zwróć NaN, jeśli którakolwiek kolumna ma NaN
    np.where(IPRA_WHA_m['Rabat IPRA'] >= IPRA_WHA_m['Rabat P+'], 1, 0)  # W przeciwnym razie wykonaj porównanie
)


EO_m['EO vs P+'] = np.where(
    EO_m['Rabat EO'].isna() | EO_m['Rabat P+'].isna(),  # Sprawdź, czy którakolwiek z kolumn ma NaN
    np.nan,  # Zwróć NaN, jeśli którakolwiek kolumna ma NaN
    np.where(EO_m['Rabat EO'] >= EO_m['Rabat P+'], 1, 0)  # W przeciwnym razie wykonaj porównanie
)


kEO = ['Indeks','Nazwa','Producent','data rozpoczęcia promocji','data zakończenia promocji','ID promocji','Rabat EO','Wyłączenie z rabatowania',
      'Ilość min.','RKMH','Uwaga','Rabat P+','EO vs P+']
kIPRA = ['Indeks', 'Nazwa', 'Producent', 'data rozpoczęcia promocji', 'data zakończenia promocji', 'ID promocji', 'Rabat IPRA', 'Wyłączenie z rabatowania', 'Ilość min.', 'RKMH', 'Uwaga', 
         'Rabat P+', 'IPRA vs P+']



IPRA_WHA_m = IPRA_WHA_m[kIPRA]
EO_m = EO_m[kEO]




IPRA = st.file_uploader(
    label = "Wrzuć ofertę IPRA"
)
if IPRA:
    IPRA_WHA = pd.read_excel(IPRA, sheet_name = 'IPRA WHA')
    st.write(IPRA_WHA.head())

IPRA_WHA

# Tworzenie pliku Excel z dwoma arkuszami
excel_file1 = io.BytesIO()
with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
    # Zapisanie IPRA_WHA_m do arkusza o nazwie "IPRA WHA"
    IPRA_WHA_m.to_excel(writer, index=False, sheet_name='IPRA WHA')
    
    # Zapisanie EO_m do arkusza o nazwie "EO"
    EO_m.to_excel(writer, index=False, sheet_name='EO')

# Resetowanie wskaźnika do początku pliku
excel_file1.seek(0)

# Umożliwienie pobrania pliku Excel
st.download_button(
    label='Pobierz IPRA vs P+',
    data=excel_file1,
    file_name='IPRA vs P+.xlsx',
    mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
)

# Tworzenie drugiego pliku Excel z arkuszem P+ vs IPRA
excel_file2 = io.BytesIO()
with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
    # Zapisanie df_m do arkusza o nazwie "P+ vs IPRA"
    df_merged2.to_excel(writer, index=False, sheet_name='P+ vs IPRA')

# Resetowanie wskaźnika do początku pliku
excel_file2.seek(0)

# Umożliwienie pobrania pliku Excel
st.download_button(
    label='Pobierz P+ vs IPRA',
    data=excel_file2,
    file_name='P+ vs IPRA.xlsx',
    mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
)




