# -*- coding: utf-8 -*-
"""Soczyste rabaty.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bfU5lwdNa2GOPWmQ9-URaf30VnlBzQC0
"""

#importowanie potrzebnych bibliotek
import os
import openpyxl
import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import plotly.express as px
import plotly.graph_objects as go
from urllib.request import urlopen
import json
import io
import datetime



st.set_page_config(page_title='Por√≥wnanie rabat√≥w - IPRA vs P+', layout='wide')



tabs_font_css = """
<style>
div[class*="stTextInput"] label {
  font-size: 26px;
  color: black;
}
div[class*="stSelectbox"] label {
  font-size: 26px;
  color: black;
}
</style>
"""

st.title("Automat POR√ìWNANIE RABAT√ìW - Instrukcja obs≈Çugi")

st.markdown("""
### Jak korzystaƒá z aplikacji?
1. Nie przejmuj siƒô, ≈ºe strona wy≈õwietla b≈ÇƒÖd: **TypeError**. Bƒôdzie on widoczny, dop√≥ki nie wrzucisz pliku z Raportem promocyjnym, kt√≥ry codziennie dostajesz na maila :)
2. Jak go wrzuciƒá?  
    2.1. Pobierz folder z maila.  
    2.2. Folder pobierze siƒô w formacie **.zip** (jak na obrazku poni≈ºej - zip - ten zasuwak na folderze).
""")


st.image("potrzebne_fotki/zip.png")

st.markdown("""&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.3. Rozpakuj pobrany folder .zip, klikajƒÖc na niego prawym przyciskiem myszy i wybierajƒÖc opcjƒô **Wyodrƒôbnij wszystkie**.  
&nbsp;&nbsp;&nbsp;&nbsp;2.4. Teraz powinien otworzyƒá siƒô rozpakowany folder z dwoma plikami excel wewnƒÖtrz - jak na obrazku poni≈ºej.""", unsafe_allow_html=True)

st.image("potrzebne_fotki/rozpakowany_zip.png")







df = st.file_uploader(
    label = "Wrzuƒá Raport promocyjny"
)
if df:
    df = pd.read_csv(df, sep=';')
    st.write(df.head())

# Wybieranie tylko okre≈õlonych kolumn z DataFrame
kolumny = [
    'Id Materia≈Çu', 'Nazwa Materia≈Çu','Nr producenta sprzeda≈ºowego', 'Nazwa producenta sprzeda≈ºowego', 
    'identyfikator promocji', 'Nazwa Promocji', 'Nr zlecenia', 'Data obowiƒÖzywania promocji od','Data obowiƒÖzywania promocji do',  
    'Sk≈Çad (SPR,SGL)', 'Czy dopuszcza rabat kontraktowy','Rodzaj warunku p≈Çatno≈õci',
    'Rabat Promocyjny'

]

# Filtruj kolumny w DataFrame
df = df[kolumny]

# Czy dopuszcza rabat kontraktowy = 1 - tylko promocje WHA
df = df[df["Czy dopuszcza rabat kontraktowy"] == 1]


# Rodzaj promocji
df["Rodzaj promocji"] = ""  # Inicjalizacja kolumny
df.loc[df["Nr zlecenia"] == 61114, "Rodzaj promocji"] = "≈öZ/P"
df.loc[df["Nazwa Promocji"].str.contains("ZGZ", na=False), "Rodzaj promocji"] = "ZGZ"
df.loc[df["Nazwa Promocji"].str.contains("BKS", na=False), "Rodzaj promocji"] = "sieci"
df.loc[df["Nr zlecenia"] == 27001, "Rodzaj promocji"] = "centralne"
df.loc[df["Nazwa Promocji"].str.contains("RPM", na=False), "Rodzaj promocji"] = "RPM"
df.loc[df["Nazwa Promocji"].str.contains("IPRA", na=False), "Rodzaj promocji"] = "IPRA"
df.loc[df["Nazwa Promocji"].str.contains("RPM_HIT|RPM HIT", na=False, regex=True), "Rodzaj promocji"] = "EO"

# Oczyszczanie kolumny 'Rabat Promocyjny'
df['Rabat Promocyjny'] = df['Rabat Promocyjny'].fillna(0)
df = df[df["Rabat Promocyjny"] != 0]
df['Rabat Promocyjny'] = df['Rabat Promocyjny'].str.replace(',', '.')  # ZastƒÖp przecinki kropkami, je≈õli sƒÖ
df['Rabat Promocyjny'] = df['Rabat Promocyjny'].str.strip()  # Usuwanie bia≈Çych znak√≥w
# Konwersja na typ numeryczny (float), w przypadku problem√≥w, zamienia warto≈õci na NaN
df['Rabat Promocyjny'] = pd.to_numeric(df['Rabat Promocyjny'])
df['Rabat Promocyjny'] = df['Rabat Promocyjny'].abs()
df['Rabat Promocyjny'] = df['Rabat Promocyjny'] / 100
# ZaokrƒÖglenie do 2 miejsc po przecinku (opcjonalnie)
df['Rabat Promocyjny'] = df['Rabat Promocyjny'].round(4)
df = df[df["Rabat Promocyjny"] != 0]



# Sprawdzenie warto≈õci po konwersji
# st.write("Typ danych w kolumnie 'Rabat Promocyjny':", df['Rabat Promocyjny'].dtype)

# Sprawdzenie warto≈õci po konwersji
# st.write("Przyk≈Çadowe warto≈õci w 'Rabat Promocyjny':", df['Rabat Promocyjny'].head())

df1 = df.copy()
# Usuniƒôcie spacji i zamiana pustych string√≥w na NaN
df1 = df1.dropna(subset=["Rodzaj promocji"])
df1["Rabat Promocyjny"] = pd.to_numeric(df1["Rabat Promocyjny"], errors="coerce")


# widok z kolejnego arkusza
# Tworzenie tabeli przestawnej
pivot_table = df1.pivot_table(
    index=["Nazwa producenta sprzeda≈ºowego", "Id Materia≈Çu", "Nazwa Materia≈Çu"], 
    columns="Rodzaj promocji", 
    values="Rabat Promocyjny", 
    aggfunc="max"
)

# Resetowanie indeksu dla lepszej czytelno≈õci
pivot_table1 = pivot_table.reset_index()
# Wyb√≥r tylko konkretnych kolumn (np. "Promocja A" i "Promocja B")
selected_columns = ["Nazwa producenta sprzeda≈ºowego", "Id Materia≈Çu", "Nazwa Materia≈Çu", "IPRA", "EO", "≈öZ/P", "RPM", "ZGZ", "sieci", "centralne"]
pivot_table1 = pivot_table1[selected_columns]

# pivot_table1


# Tylko IPRA, EO i ≈öZ/P
selected2 = ["Nazwa producenta sprzeda≈ºowego", "Id Materia≈Çu", "Nazwa Materia≈Çu", "IPRA", "EO", "≈öZ/P"]
pivot_table2 = pivot_table1[selected2]
pivot_table2 = pivot_table2.dropna(subset=["IPRA", "EO", "≈öZ/P"], how="all")



# SƒÖ w IPRA, nie ma w ≈öZ/P
# Krok 1: Wybieramy produkty, kt√≥re sƒÖ w "IPRA", ale nie ma ich w "≈öZ/P"
df_ipra = pivot_table2[pivot_table2["IPRA"].notna()]  # Wybieramy tylko te wiersze, gdzie w kolumnie "IPRA" jest warto≈õƒá (nie NaN)
df_szp = pivot_table2[pivot_table2["≈öZ/P"].notna()]  # Wybieramy tylko te wiersze, gdzie w kolumnie "≈öZ/P" jest warto≈õƒá (nie NaN)
# Krok 2: Usuwamy produkty z df_ipra, kt√≥re wystƒôpujƒÖ w df_szp
# Zak≈ÇadajƒÖc, ≈ºe "Id Materia≈Çu" set difference na Id materia≈Çu
products_in_ipra_not_in_szp = df_ipra[~df_ipra["Id Materia≈Çu"].isin(df_szp["Id Materia≈Çu"])]
# Krok 3: Tworzymy tabelƒô z produktami, kt√≥re sƒÖ w IPRA, ale nie w ≈öZ/P
# Mo≈ºesz dodaƒá dowolne kolumny, kt√≥re chcesz w tej tabeli, np.:
products_ipra_not_szp = products_in_ipra_not_in_szp[["Nazwa producenta sprzeda≈ºowego", "Id Materia≈Çu", "Nazwa Materia≈Çu", "IPRA"]]


# SƒÖ w EO, nie ma w ≈öZ/P
df_eo = pivot_table2[pivot_table2["EO"].notna()]
products_in_eo_not_in_szp = df_eo[~df_eo["Id Materia≈Çu"].isin(df_szp["Id Materia≈Çu"])]
products_eo_not_szp = products_in_eo_not_in_szp[["Nazwa producenta sprzeda≈ºowego", "Id Materia≈Çu", "Nazwa Materia≈Çu", "EO"]]

# SƒÖ w ≈öZ/P, nie ma w IPRA
products_in_szp_not_in_ipra = df_szp[~df_szp["Id Materia≈Çu"].isin(df_ipra["Id Materia≈Çu"])]
products_szp_not_ipra = products_in_szp_not_in_ipra[["Nazwa producenta sprzeda≈ºowego", "Id Materia≈Çu", "Nazwa Materia≈Çu", "≈öZ/P"]]

# SƒÖ w ≈öZ/P, nie ma w EO
products_in_szp_not_in_eo = df_szp[~df_szp["Id Materia≈Çu"].isin(df_eo["Id Materia≈Çu"])]
products_szp_not_eo = products_in_szp_not_in_eo[["Nazwa producenta sprzeda≈ºowego", "Id Materia≈Çu", "Nazwa Materia≈Çu", "≈öZ/P"]]




# Pobranie dzisiejszej daty w formacie YYYY-MM-DD
today = datetime.datetime.today().strftime('%d-%m-%Y')

# Tworzenie pliku Excel w pamiƒôci
excel_file1 = io.BytesIO()

with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
    # Zapisywanie arkuszy
    df.to_excel(writer, index=False, sheet_name='dane')
    pivot_table1.to_excel(writer, index=False, sheet_name='por√≥wnanie rabat√≥w')
    pivot_table2.to_excel(writer, index=False, sheet_name='IPRA vs ≈öZP')
    products_ipra_not_szp.to_excel(writer, index=False, sheet_name='sƒÖ w IPRA - nie w ≈öZP')
    products_eo_not_szp.to_excel(writer, index=False, sheet_name='sƒÖ w EO - nie w ≈öZP')
    products_szp_not_ipra.to_excel(writer, index=False, sheet_name='sƒÖ w ≈öZP - nie w IPRA')
    products_szp_not_eo.to_excel(writer, index=False, sheet_name='sƒÖ w ≈öZP - nie w EO')

    # Pobranie workbooka i arkuszy
    workbook = writer.book
    worksheet1 = writer.sheets["dane"]
    worksheet2 = writer.sheets["por√≥wnanie rabat√≥w"]
    worksheet3 = writer.sheets["IPRA vs ≈öZP"]
    worksheet4 = writer.sheets["sƒÖ w IPRA - nie w ≈öZP"]
    worksheet5 = writer.sheets["sƒÖ w EO - nie w ≈öZP"]
    worksheet6 = writer.sheets["sƒÖ w ≈öZP - nie w IPRA"]
    worksheet7 = writer.sheets["sƒÖ w ≈öZP - nie w EO"]

    # üé® Ustawienie kolor√≥w zak≈Çadek
    worksheet1.set_tab_color('#0000FF')  # üîµ Niebieski dla "dane"
    worksheet2.set_tab_color('#008000')  # üü¢ Zielony dla "por√≥wnanie rabat√≥w"
    worksheet3.set_tab_color('#008000')  # üü¢ Zielony dla "IPRA vs ≈öZP"
    
    pomaranczowy = '#FFA500'  # üü† Pomara≈Ñczowy dla arkuszy "sƒÖ w ... - nie w ..."
    worksheet4.set_tab_color(pomaranczowy)
    worksheet5.set_tab_color(pomaranczowy)
    worksheet6.set_tab_color(pomaranczowy)
    worksheet7.set_tab_color(pomaranczowy)

    # üé® Definiowanie format√≥w kolor√≥w dla rabat√≥w
    green_format = workbook.add_format({'bg_color': '#C6EFCE', 'font_color': '#006100'})  # Zielony
    red_format = workbook.add_format({'bg_color': '#FFC7CE', 'font_color': '#9C0006'})  # Czerwony
    orange_format = workbook.add_format({'bg_color': '#FFA500', 'font_color': '#000000'})  # Pomara≈Ñczowy

    # Pobranie rozmiaru tabeli
    num_rows = len(pivot_table2)
    rabat_range = f"D2:F{num_rows+1}"  # Kolumny D, E, F (IPRA, EO, ≈öZ/P)

    # Pobranie rozmiaru tabeli
    num_rows = len(pivot_table2)
    rabat_range = f"D2:F{num_rows+1}"  # Kolumny D, E, F (IPRA, EO, ≈öZ/P)

    # Pobranie rozmiaru tabeli
    num_rows = len(pivot_table2)
    rabat_range = f"D2:F{num_rows+1}"  # Zakres dla kolumn IPRA, EO, ≈öZ/P
    
    # Formatowanie: Najwy≈ºszy rabat ‚Üí zielony
    for col in ['D', 'E', 'F']:
        worksheet3.conditional_format(f"{col}2:{col}{num_rows+1}", {
            'type': 'formula',
            'criteria': f"={col}2=MAX($D2:$F2)",
            'format': green_format
        })
    
    # Formatowanie: Najni≈ºszy rabat ‚Üí czerwony
    for col in ['D', 'E', 'F']:
        worksheet3.conditional_format(f"{col}2:{col}{num_rows+1}", {
            'type': 'formula',
            'criteria': f"={col}2=MIN(IF($D2:$F2<>\"\", $D2:$F2))",
            'format': red_format
        })
    
    # Formatowanie: Brak rabatu ‚Üí pomara≈Ñczowy
    worksheet3.conditional_format(rabat_range, {
        'type': 'blanks',
        'format': orange_format
    })

    # üìè Ustawienie szeroko≈õci kolumn
    max_length = pivot_table1['Nazwa Materia≈Çu'].apply(lambda x: len(str(x))).max()
    max_length1 = pivot_table1['Nazwa producenta sprzeda≈ºowego'].apply(lambda x: len(str(x))).max()
    
    for ws in [worksheet2, worksheet3, worksheet4, worksheet5, worksheet6, worksheet7]:
        ws.set_column('C:C', max_length + 2)  # Kolumna C - Nazwa Materia≈Çu
        ws.set_column('A:A', max_length1 + 2)  # Kolumna A - Nazwa producenta sprzeda≈ºowego

# Resetowanie wska≈∫nika do poczƒÖtku pliku
excel_file1.seek(0)

# Pobranie pliku w Streamlit
st.download_button(
    label='Pobierz por√≥wnanie rabat√≥w',
    data=excel_file1,
    file_name=f'Por√≥wnanie_rabat√≥w_{today}.xlsx',
    mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
)

# st.write(f"Zakres formatowania: {rabat_range}")

